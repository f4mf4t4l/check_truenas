#!/usr/bin/env python3

from requests.exceptions import ConnectionError
from requests.packages.urllib3.exceptions import InsecureRequestWarning
import requests
import json
import click
import humanfriendly
import urllib3
import sys
from NagiosCheckHelper import NagErrors, NagEval

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

class Globals(object):
    def __init__(self, token=None, host=None):
        self.token = token
        self.host = host


@click.pass_context
def get_data(ctx, api_path):
    try:
        res = requests.get(
            "https://{}/api/v2.0/{}".format(ctx.obj.host, api_path),
            headers={'Content-Type': 'application/json', 'Authorization': 'Bearer {}'.format(ctx.obj.token)},
            verify=False
        )
        res.raise_for_status()
        return res
    except (ConnectionError, Exception) as e:
        click.echo(e)
        sys.exit(2)

@click.pass_context
def post_data(ctx, api_path):
    try:
        res = requests.post(
            "https://{}/api/v2.0/{}".format(ctx.obj.host, api_path),
            headers={'Content-Type': 'application/json', 'Authorization': 'Bearer {}'.format(ctx.obj.token)},
            verify=False
        )
        res.raise_for_status()
        return res
    except (ConnectionError, Exception) as e:
        click.echo(e)
        sys.exit(2)

@click.group()
@click.option("--token", "-t", help="Truenas api token")
@click.option("--host", "-H", help="Truenas host name or IP")
@click.pass_context
def cli(ctx, token, host):
    """This script uses the TrueNas REST API v2.0 to monitor the TrueNAS device.

    \b
    Examples:
    check_truenas -t token_here -H 192.168.168.210 pools -w 82 -c 92
    
    check_truenas -t token_here -H 192.168.168.210 alerts
    
    check_truenas -t token_here -H 192.168.168.210 replications

    """
    ctx.obj = Globals(token, host)


@cli.command("pools")
@click.option("--warning", "-w", default=int(70), help="Warning usage threshold")
@click.option("--critical", "-c", default=int(80), help="Critical usage threshold")
def pools(warning, critical):
    nerr = NagErrors()
    neval = NagEval(nerr)

    pool_data = get_data("pool")
    pool_dict = json.loads(pool_data.content)
    dataset_data = get_data("pool/dataset")
    dataset_dict = json.loads(dataset_data.content)
    
    if len(pool_dict) < 1:
        nerr.addUnknown("No pools found")
        nerr.printStatus()
        nerr.doExit()

    for pool in pool_dict:
        neval.evalEnum(pool["status"], defaultStatus="CRITICAL", okValues=["ONLINE"], prefixText="{} pool status ".format(pool["name"]))
        click.echo("Pool {}:".format(pool["name"]))
        click.echo("    Path: {}".format(pool["path"]))
        click.echo("    Status: {}".format(pool["status"]))

        for dataset in dataset_dict:
            if dataset["name"] != pool["name"]:
                continue
            ava = int(dataset["available"]["rawvalue"])
            used = int(dataset["used"]["rawvalue"])
            size = ava + used
            perc_used = round((used * 100) / size)
            testResult = neval.evalNumberAsc(perc_used, warningAbove=warning, criticalAbove=critical, prefixText="Dataset {} ".format(dataset["name"]), numberUnits="%")
            click.echo("    Size {}: ".format(humanfriendly.format_size(size, binary=True)))
            click.echo("    Used: {} {}%".format(humanfriendly.format_size(used, binary=True), str(perc_used)))
            click.echo("    {}\n".format(testResult))

    nerr.printStatus()
    nerr.doExit()


@cli.command("replications")
def replications():
    nerr = NagErrors()

    repl_data = get_data("replication")
    repl_dict = json.loads(repl_data.content)

    if len(repl_dict) < 1:
        nerr.addUnknown("No replication job's found")
        nerr.printStatus()
        nerr.doExit()
    
    for repl in repl_dict:
        state = repl["state"]["state"]
        if state == "ERROR":
            nerr.addCritical("Problem with job {}".format(repl["name"]))
        click.echo("Replication job {}:".format(repl["name"]))
        click.echo("    State: {}\n".format(state))

    nerr.printStatus()
    nerr.doExit()


@cli.command("alerts")
def alerts():
    nerr = NagErrors()

    alert_data = get_data("/alert/list")
    alert_dict = json.loads(alert_data.content)

    for alert in alert_dict:
        click.echo("{}:".format(alert["level"]))
        click.echo("{}\n".format(alert["formatted"]))
        if alert["level"] == "WARNING":
            nerr.addWarning("{}".format(alert["formatted"]))
        if alert["level"] == "CRITICAL":
            nerr.addCritical("{}".format(alert["formatted"]))

    nerr.doExit()


@cli.command("updates")
def alerts():
    nerr = NagErrors()
    neval = NagEval(nerr)

    data = post_data("/update/check_available")
    ddict = json.loads(data.content)

    neval.evalEnum(ddict["status"], okValues=['UNAVAILABLE'], warningValues=['AVAILABLE'], criticalValues=['HA_UNAVAILABLE', 'REBOOT_REQUIRED'])
    nerr.printStatus()
    nerr.doExit()


if __name__ == "__main__":
    cli()





